---
title: "GAPMINDER | Women's health 1990 - 2019"
format: dashboard
theme: minty
execute:
    echo: false
---

```{python}
#Â Imports
import pandas as pd
import plotly.express as px
import itables
import country_converter as cc
```

```{python}
#Â Load the data

# female life expectancy
life_exp = pd.read_csv("life_expectancy_female.csv")

# maternal mortality rate
mort_rate = pd.read_csv("mmr_ihme.csv")

# children per woman
children_per_woman = pd.read_csv("children_per_woman_total_fertility.csv")

```

```{python}
#Â creating long versions of the dataframes

# female life exp
life_exp_long = life_exp.melt(
    id_vars = "country",
    var_name = "year",
    value_name = "life_expectancy"
)
# checking
life_exp_long

#Â maternal mortality rate
mort_rate_long = mort_rate.melt(
    id_vars = "country",
    var_name = "year",
    value_name = "maternal_mortality_rate"
)
# checking
mort_rate_long

# children per woman
children_per_woman_long = children_per_woman.melt(
    id_vars = "country",
    var_name = "year",
    value_name = "children_per_woman"
)
# checking
children_per_woman_long
```

```{python}
# I want to have the "year" variable as an integer in every dataframe
life_exp_long["year"] = life_exp_long["year"].astype(int)

mort_rate_long["year"] = mort_rate_long["year"].astype(int)

children_per_woman_long["year"] = children_per_woman_long["year"].astype(int)

```

```{python}
# query the data to only have data from 1990 to 2015
life_exp_long = life_exp_long.query("year >= 1990 & year <= 2015")

mort_rate_long = mort_rate_long.query("year >= 1990 & year <= 2015")

children_per_woman_long = children_per_woman_long.query("year >= 1990 & year <= 2015")
```

```{python}
# merging the dataframes to have a single one in long format
merged_data = pd.merge(
    life_exp_long, mort_rate_long, on=["country", "year"], how="inner"
)

merged_data = pd.merge(
    merged_data, children_per_woman_long, on=["country", "year"], how="inner"
)

merged_data
```

```{python}
# adding continent information
merged_data["continent"] = cc.convert(names=merged_data["country"], to="continent")

# checking
merged_data["continent"].value_counts()

# I get 6 instances where it was not found
```

```{python}
# querying for the rows where it could not assign a continent
merged_data.query("continent == 'not found'")

# the instances all come from UAE, I can replace UAE
merged_data["country"] = merged_data["country"].replace({"UAE": "United Arab Emirates"})
```

```{python}
# I repeat the process for the continent
# adding continent information
merged_data["continent"] = cc.convert(names=merged_data["country"], to="continent")

# checking
merged_data["continent"].value_counts()

# this time it worked
```

```{python}
# querying the data for 2015
merged_2015 = merged_data.query("year == 2015")

# finding for each continent the country with the highest mortality rate in 2015
highest_mortality_2015 = merged_2015.loc[
    merged_2015.groupby("continent")["maternal_mortality_rate"].idxmax()
]

# renaming the variables to have a prettier table
highest_mortality_2015 = highest_mortality_2015.rename(
    columns={
        "country": "Country",
        "year": "Year",
        "life_expectancy": "Life expectancy",
        "maternal_mortality_rate": "Maternal mortality rate",
        "children_per_woman": "Number of childre per woman",
        "continent": "Continent",
    }
)

# table for 2015, sorted by maternal mortality rate
itables.show(
    highest_mortality_2015.sort_values(by="Maternal mortality rate", ascending=False)
)

# lowest mortality rate
lowest_mortality_2015 = merged_2015.loc[
    merged_2015.groupby("continent")["maternal_mortality_rate"].idxmin()
]
itables.show(
    lowest_mortality_2015.sort_values(by="maternal_mortality_rate", ascending=False)
)
```

```{python}
# making a graph for Liberia
# querying for Liberia
liberia_data = merged_data.query("country == 'Liberia'")

# making the graph
liberia_graph = px.line(
    liberia_data,
    x="year",
    y="maternal_mortality_rate",
    title="Maternal mortality rate in Liberia over time",
    labels={"maternal_mortality_rate": "Maternal mortality rate", "year": "Year"},
)
liberia_graph.show()
```

```{python}
# plotting maternal mortality rate against life expectancy
mortality_figure = px.scatter(
    merged_2015,
    x="life_expectancy",
    y="maternal_mortality_rate",
    color="continent",
    title=" Maternal mortality rate against against life expectancy in 2015",
    labels={
        "life_expectancy": " Life expectancy",
        "maternal_mortality_rate": "Maternal mortality rate",
        "continent": "Continent",
    },
    hover_name="country",
)
mortality_figure.show()

```

```{python}
# making a graph for the number of children per woman in 2015
children_2015 = px.strip(
    merged_2015,
    y="children_per_woman",
    color="continent",
    hover_data="country",
    title="Children per woman in 2015",
    labels={
        "children_per_woman": "Number of children per woman",
        "continent": "Continent",
    },
)

children_2015.show()
```

```{python}
# making a graph for the number of children per woman in 1990
# querying for 1990
merged_1990 = merged_data.query("year == 1990")

# graph
children_1990 = px.strip(
    merged_1990,
    y="children_per_woman",
    color="continent",
    hover_data="country",
    title="Children per woman in 1990",
    labels={
        "children_per_woman": "Number of children per woman",
        "continent": "Continent",
    },
)

children_1990.show()
```

```{python}
# creating a new column with iso3 codes  to plot a map
merged_2015["iso3"] = cc.convert(names=merged_2015["country"], to="ISO3")

# making a map for number of children per woman
map_fig = px.choropleth(
    merged_2015,
    locations="iso3",
    color="children_per_woman",
    hover_name="country",
    color_continuous_scale="Greens",
    title="Number of children per woman in 2015",
    labels={"children_per_woman": "Children per woman"},
)

map_fig.show()

```

```{python}
# computing average life expectancy per continent over time
continent_avg = (
    merged_data.groupby(["continent", "year"])["life_expectancy"].mean().reset_index()
)

# checking
continent_avg

# making an interactive graph of life expectancy over time
life_exp_time = px.bar(
    continent_avg,
    x="continent",
    y="life_expectancy",
    animation_frame="year",
    color="continent",
    labels={
        "life_expectancy": "Life expectancy",
        "continent": "Continent",
        "year": "Year",
    },
    title="Life expectancy over time",
)
life_exp_time.show()
```

```{python}
figure_relationship = px.scatter(merged_data, x = "children_per_woman", y = "maternal_mortality_rate" , animation_frame = "year", color = "continent", hover_name = "country", labels = {"children_per_woman" : "Number of children per woman", "maternal_mortality_rate" : "Maternal mortality rate", "continent":"Continent"}, title ="Evolution of maternal mortality rate and number of children per woman")

figure_relationship.show()
```

```{python}
# Get index of the max value per year
idx = merged_data.groupby('year')['children_per_woman'].idxmax()

# Use those indexes to get the full rows (includes country info)
highest_per_year = merged_data.loc[idx].sort_values('year')

itables.show(highest_per_year)

# Get index of the max value per year
idx_2 = merged_data.groupby('year')['children_per_woman'].idxmin()

# Use those indexes to get the full rows (includes country info)
lowest_per_year = merged_data.loc[idx_2].sort_values('year', ascending = True)

itables.show(lowest_per_year)
```

```{python}
mean_children = round(merged_2015["children_per_woman"].mean(),2)
mean_children

max_children = round(merged_2015["children_per_woman"].max(),2)
max_children

min_children = round(merged_2015["children_per_woman"].min(),2)
min_children
```

```{python}

mean_life = round(merged_2015["life_expectancy"].mean(),2)
max_life = round(merged_2015["life_expectancy"].max(),2)
min_life = round(merged_2015["life_expectancy"].min(),2)
```


```{python}
average_continent = (
    merged_data
    .groupby(["continent", "year"])["maternal_mortality_rate"]
    .mean()
    .reset_index()
)

average_continent["maternal_mortality_rate"] = average_continent["maternal_mortality_rate"].round(2)

fig = px.line(
    average_continent,
    x='year',
    y='maternal_mortality_rate',
    color='continent',
    markers=True,
    title='Average Mortality Rate per Continent Over the Years',
    labels={'mortality_rate': 'Mortality Rate', 'year': 'Year'}
)

fig.show()

```